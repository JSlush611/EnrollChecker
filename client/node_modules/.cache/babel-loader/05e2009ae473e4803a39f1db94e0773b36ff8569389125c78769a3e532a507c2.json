{"ast":null,"code":"var _jsxFileName = \"/Users/jonathanschluesche/Desktop/EnrollChecker/client/src/scenes/helpPage/index.jsx\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { Box, Typography, TextField, Button } from \"@mui/material\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HelpPage = () => {\n  _s();\n  const [questions, setQuestions] = useState([]);\n  const [newQuestion, setNewQuestion] = useState(\"\");\n  const [newAnswer, setNewAnswer] = useState(\"\");\n  const handleAddQuestion = () => {\n    const updatedQuestions = [...questions, {\n      question: newQuestion,\n      answer: newAnswer\n    }];\n    setQuestions(updatedQuestions);\n    setNewQuestion(\"\");\n    setNewAnswer(\"\");\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    padding: \"2rem\",\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      gutterBottom: true,\n      children: \"Frequently Asked Questions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this), questions.map((faq, index) => /*#__PURE__*/_jsxDEV(Box, {\n      mb: \"1rem\",\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        children: faq.question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        children: faq.answer\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 11\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(Box, {\n      mt: \"2rem\",\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h5\",\n        gutterBottom: true,\n        children: \"Add a Question\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        label: \"Question\",\n        value: newQuestion,\n        onChange: e => setNewQuestion(e.target.value),\n        fullWidth: true,\n        margin: \"normal\",\n        variant: \"outlined\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        label: \"Answer\",\n        value: newAnswer,\n        onChange: e => setNewAnswer(e.target.value),\n        fullWidth: true,\n        multiline: true,\n        rows: 4,\n        margin: \"normal\",\n        variant: \"outlined\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        onClick: handleAddQuestion,\n        children: \"Add\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 5\n  }, this);\n};\n_s(HelpPage, \"c9hVRvIdbNQVaqAOtPQJajSBfHM=\");\n_c = HelpPage;\nexport default HelpPage;\nvar _c;\n$RefreshReg$(_c, \"HelpPage\");","map":{"version":3,"names":["useState","Box","Typography","TextField","Button","jsxDEV","_jsxDEV","HelpPage","_s","questions","setQuestions","newQuestion","setNewQuestion","newAnswer","setNewAnswer","handleAddQuestion","updatedQuestions","question","answer","padding","children","variant","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","map","faq","index","mb","mt","label","value","onChange","e","target","fullWidth","margin","multiline","rows","onClick","_c","$RefreshReg$"],"sources":["/Users/jonathanschluesche/Desktop/EnrollChecker/client/src/scenes/helpPage/index.jsx"],"sourcesContent":["import { useState } from \"react\";\nimport { Box, Typography, TextField, Button } from \"@mui/material\";\n\nconst HelpPage = () => {\n  const [questions, setQuestions] = useState([]);\n  const [newQuestion, setNewQuestion] = useState(\"\");\n  const [newAnswer, setNewAnswer] = useState(\"\");\n\n  const handleAddQuestion = () => {\n    const updatedQuestions = [...questions, { question: newQuestion, answer: newAnswer }];\n    setQuestions(updatedQuestions);\n    setNewQuestion(\"\");\n    setNewAnswer(\"\");\n  };\n\n  return (\n    <Box padding=\"2rem\">\n      <Typography variant=\"h4\" gutterBottom>\n        Frequently Asked Questions\n      </Typography>\n\n      {/* Display existing questions */}\n      {questions.map((faq, index) => (\n        <Box key={index} mb=\"1rem\">\n          <Typography variant=\"h6\">{faq.question}</Typography>\n          <Typography>{faq.answer}</Typography>\n        </Box>\n      ))}\n\n      {/* Add new question */}\n      <Box mt=\"2rem\">\n        <Typography variant=\"h5\" gutterBottom>\n          Add a Question\n        </Typography>\n\n        <TextField\n          label=\"Question\"\n          value={newQuestion}\n          onChange={(e) => setNewQuestion(e.target.value)}\n          fullWidth\n          margin=\"normal\"\n          variant=\"outlined\"\n        />\n\n        <TextField\n          label=\"Answer\"\n          value={newAnswer}\n          onChange={(e) => setNewAnswer(e.target.value)}\n          fullWidth\n          multiline\n          rows={4}\n          margin=\"normal\"\n          variant=\"outlined\"\n        />\n\n        <Button variant=\"contained\" onClick={handleAddQuestion}>\n          Add\n        </Button>\n      </Box>\n    </Box>\n  );\n};\n\nexport default HelpPage;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}