# This file can be run with the `task` utility: https://taskfile.dev/
version: '3'

dotenv: ['.env', '.env.local']

vars:
  APP_VERSION_FILE: './version/version.go'
  ENTRY_FILENAME: './main.go'
  BUILD_OUTPUT_DIR: './dist'
  BINARY_FILENAME: 'scraper'
  DIST_TARGET_FILE: '{{.BUILD_OUTPUT_DIR}}/{{.BINARY_FILENAME}}'
  GIT_COMMIT:
    sh: git log -n 1 --format=%h
  GOLANGCILINT_CMD_DIRS:
    sh: find . -name "*.go" -printf '%h\n' | sort -u | egrep -v '^.$' | grep -v './tools' | sd '\n' ' ' | awk -F'|' '{ print $1 }'

tasks:

  mod:
    desc: Downloads and tidy Go modules
    cmds:
      - go mod download
      - go mod tidy

  build:
    desc: Builds application
    preconditions:
      - task: prepare-dist-folder
      - task: mod
    cmds:
      - task: build-app
      - task: copy-config-files-to-dist

  clean:
    desc: Cleans up build artifacts
    preconditions:
      - test -d {{.BUILD_OUTPUT_DIR}}
      - test -f {{.DIST_TARGET_FILE}}
    cmds:
      - rm -f {{.DIST_TARGET_FILE}}

  lint:
    desc: Run all linters
    cmds:
      - task: lint-app

  update-version-file:
    cmds:
      - go run tools/generate-version-file.go

  lint-app:
    desc: Runs golangci-lint
    internal: false
    ignore_error: true
    dir: .
    preconditions:
      - test -f .golangci.yaml
      - which golangci-lint
    cmds:
      - golangci-lint run {{.GOLANGCILINT_CMD_DIRS}}

  prepare-dist-folder:
    desc: Prepares dist folder
    silent: true
    internal: true
    cmds:
      - mkdir -p {{.BUILD_OUTPUT_DIR}}
    status:
      - test -d {{.BUILD_OUTPUT_DIR}}

  build-app:
    desc: Builds app binary
    internal: true
    sources:
      - '{{.GOLANGCILINT_CMD_DIRS}}'
    generates:
      - '{{.DIST_TARGET_FILE}}'
    cmds:
      - go build -trimpath -ldflags="-s -w -X main.Version={{.VERSION}}-{{.GIT_COMMIT}}" -o {{.DIST_TARGET_FILE}} {{.ENTRY_FILENAME}}

  copy-config-files-to-dist:
    desc: Copies config template to dist folder
    internal: true
    deps:
      - task: prepare-dist-folder
    cmds:
      -  cp -f ./.env {{.BUILD_OUTPUT_DIR}}

  autobuild:
    interactive: true
    desc: Watches for changes and automatically rebuilds the project binary, displays a minimal system notification on start/finish
    preconditions:
      - which watchexec
    cmds:
      - watchexec --exts go --fs-events create,modify,remove -N --debounce 300 -w ./lib -- task build -f
